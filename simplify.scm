;; File: simplify.scm

(define simplify
	(lambda (expr)
		(cond
			((null? expr)
				'())
			((number? expr)
				expr)
			((symbol? expr)
				expr)
			((equal? (length expr) 1)
				(car expr))
			((equal? (first expr) 'dec)
				(simplify (cons (last expr) '( - 1))))
			((equal? (first expr) 'inc)
				(simplify (cons (last expr) '( + 1))))
			(else
				(let ((left (simplify (first expr)))
					  (op (second expr))
					  (right (simplify (last expr))))
					(cond
						((and (equal? op '+) (equal? left 0))
							(simplify right))
						((and (equal? op '+) (equal? right 0))
							(simplify left))
						((and (equal? op '*) (or (equal? left 0) (equal? right 0)))
							0)
						((and (equal? op '*) (equal? left 1))
							(simplify right))
						((and (equal? op '*) (equal? right 1))
							(simplify left))
						((and (equal? op '-) (equal? right 0))
							(simplify left))
						((and (equal? op '-) (equal? left right))
							0)
						((and (equal? op '**) (equal? right 0))
							1)
						((and (equal? op '**) (equal? right 1))
							(simplify left))
						((and (equal? op '**) (equal? left 1))
							1)
						(else
							(list (simplify left) op (simplify right)))))))))